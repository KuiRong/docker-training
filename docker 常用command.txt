sudo docker or sudo docker help

===========================================================================
|docker 環境資訊  |info , version                                          |
===========================================================================
|容器生命週期管理 |Craete,exec,kill,pause,restart,rm,run,start,stop,unpause|
===========================================================================
|映像檔倉庫指令   |login,logout,pull,push,search                           |
===========================================================================
|映像檔管理       |build,images,import,load,rmi,save,tag,commit            |
===========================================================================
|容器運行維護操作 |attach,export,inspect,port,ps,rename,stats,top,wait,cp, |
|容器資源管理     |diff,update,volume                                     |
===========================================================================
|系統記錄檔資訊   |events,history,logs                                     |
===========================================================================


$sudo docker info

$sudo docker version 


=========================================================================== run command
$sudo docker run        建立容器

$sudo docker run --help

$sudo docker run ubuntu echo "Hello World"

$sudo docker run -i -t --name mytest ubuntu:lastest /bin/bash
$sudo docker run -it --name mytest ubuntu:lastest /bin/bash
(-i : 互動模式) (-t : 偽終端) (-v : 掛載volume) (--name : docker name)
(-c : 分配CPU的shares值) (-m : 限制docker記憶體) (-p : 開通port)


=========================================================================== start/stop/restart command
$sudo docker start/stop/restart        啟動/停止/重啟

Docker registry(儲存容器映像檔倉庫)
=========================================================================== pull command
$sudo docker pull ubuntu                                   從官方hub拉取ubuntu:lastest映像檔
$sudo docker pull ubuntu:ubuntu12.04                       從官方hub拉取12.04
$sudo docker pull SEL/ubuntu                               從特定的倉庫拉取
$sudo docker pull 10.10.103.215:5000/sshd                  從其他拉取

=========================================================================== push command
$sudo docker push SEL/ubuntu

=========================================================================== image command
$sudo docker images
$sudo docker rm CONTAINER
$sudo docker rmi IMAGE

=========================================================================== attach command
$sudo docker attach CONTAINER               連接到正在執行的CONTAINER


=========================================================================== ps command
$sudo docker ps                  檢視運作中的CONTAINER
$sudo docker ps -a               檢視所有CONTAINER
$sudo docker ps -l               檢視最新CONTAINER

=========================================================================== commit command
$sudo docker commit [Options] CONTAINER [REPOSITIORY[:TAG]]        將一個容器固定為一個映像檔

=========================================================================== events history logs command
$sudo docker events [Options]
$sudo docker history [Options] IMAGE
$sudo docker logs [Options] CONTAINER

=========================================================================== more?
$sudo docker COMMAND --help


=========================================================================== Docker 叢集部屬

==>download the image all we needed.
sudo docker pull ubuntu         
sudo docker pull django
sudo docker pull haproxy
sudo docker pull redis
sudo docker images

==>using "docker run --link" to connect CONTAINER
sudo docker run --link redis:redis --name consle ubuntu bash


example:
sudo docker run -it --name redis-master redis /bin/bash
sudo docker run -it --name redis-slaver1 --link redis-master:master redis /bin/bash
sudo docker run -it --name redis-slaver2 --link redis-master:master redis /bin/bash

sudo docker run -it --name APP1 --link redis-master:db -v ~/Projects/Django/App1:/usr/src/app django /bin/bash
sudo docker run -it --name APP2 --link redis-master:db -v ~/Projects/Django/App2:/usr/src/app django /bin/bash

sudo docker run -it --name HAProxy --link APP1:APP1 --link APP2:APP2 -p 6301:6301 -v ~/Projects/HAProxy:/tmp haproxy /bin/bash
===========================================================================以上容器各分配一個終端
